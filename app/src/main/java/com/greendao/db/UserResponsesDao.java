package com.greendao.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.greendao.db.UserResponses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_RESPONSES".
*/
public class UserResponsesDao extends AbstractDao<UserResponses, Long> {

    public static final String TABLENAME = "USER_RESPONSES";

    /**
     * Properties of entity UserResponses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Q_no = new Property(1, Integer.class, "q_no", false, "Q_NO");
        public final static Property Q_code = new Property(2, String.class, "q_code", false, "Q_CODE");
        public final static Property Exam_code = new Property(3, String.class, "exam_code", false, "EXAM_CODE");
        public final static Property Max_marks = new Property(4, String.class, "max_marks", false, "MAX_MARKS");
        public final static Property Question = new Property(5, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(6, String.class, "answer", false, "ANSWER");
        public final static Property User_response = new Property(7, String.class, "user_response", false, "USER_RESPONSE");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
    };

    private Query<UserResponses> question_UserReposQuery;

    public UserResponsesDao(DaoConfig config) {
        super(config);
    }
    
    public UserResponsesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_RESPONSES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"Q_NO\" INTEGER UNIQUE ," + // 1: q_no
                "\"Q_CODE\" TEXT," + // 2: q_code
                "\"EXAM_CODE\" TEXT," + // 3: exam_code
                "\"MAX_MARKS\" TEXT," + // 4: max_marks
                "\"QUESTION\" TEXT," + // 5: question
                "\"ANSWER\" TEXT," + // 6: answer
                "\"USER_RESPONSE\" TEXT," + // 7: user_response
                "\"USER_ID\" INTEGER NOT NULL );"); // 8: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_RESPONSES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserResponses entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer q_no = entity.getQ_no();
        if (q_no != null) {
            stmt.bindLong(2, q_no);
        }
 
        String q_code = entity.getQ_code();
        if (q_code != null) {
            stmt.bindString(3, q_code);
        }
 
        String exam_code = entity.getExam_code();
        if (exam_code != null) {
            stmt.bindString(4, exam_code);
        }
 
        String max_marks = entity.getMax_marks();
        if (max_marks != null) {
            stmt.bindString(5, max_marks);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(6, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(7, answer);
        }
 
        String user_response = entity.getUser_response();
        if (user_response != null) {
            stmt.bindString(8, user_response);
        }
        stmt.bindLong(9, entity.getUserId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserResponses readEntity(Cursor cursor, int offset) {
        UserResponses entity = new UserResponses( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // q_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // q_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // exam_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // max_marks
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // question
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_response
            cursor.getLong(offset + 8) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserResponses entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQ_no(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setQ_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExam_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMax_marks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuestion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_response(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserResponses entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserResponses entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userRepos" to-many relationship of Question. */
    public List<UserResponses> _queryQuestion_UserRepos(long userId) {
        synchronized (this) {
            if (question_UserReposQuery == null) {
                QueryBuilder<UserResponses> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                question_UserReposQuery = queryBuilder.build();
            }
        }
        Query<UserResponses> query = question_UserReposQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
