package com.greendao.db;

import java.util.List;
import com.greendao.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "QUESTION".
 */
public class Question {

    private Long id;
    private Integer q_no;
    private String q_code;
    private String exam_code;
    private String max_marks;
    private String question;
    private String image;
    private String option_json;
    private String answer;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionDao myDao;

    private List<UserResponses> userRepos;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    public Question(Long id, Integer q_no, String q_code, String exam_code, String max_marks, String question, String image, String option_json, String answer) {
        this.id = id;
        this.q_no = q_no;
        this.q_code = q_code;
        this.exam_code = exam_code;
        this.max_marks = max_marks;
        this.question = question;
        this.image = image;
        this.option_json = option_json;
        this.answer = answer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getQ_no() {
        return q_no;
    }

    public void setQ_no(Integer q_no) {
        this.q_no = q_no;
    }

    public String getQ_code() {
        return q_code;
    }

    public void setQ_code(String q_code) {
        this.q_code = q_code;
    }

    public String getExam_code() {
        return exam_code;
    }

    public void setExam_code(String exam_code) {
        this.exam_code = exam_code;
    }

    public String getMax_marks() {
        return max_marks;
    }

    public void setMax_marks(String max_marks) {
        this.max_marks = max_marks;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getOption_json() {
        return option_json;
    }

    public void setOption_json(String option_json) {
        this.option_json = option_json;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UserResponses> getUserRepos() {
        if (userRepos == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserResponsesDao targetDao = daoSession.getUserResponsesDao();
            List<UserResponses> userReposNew = targetDao._queryQuestion_UserRepos(id);
            synchronized (this) {
                if(userRepos == null) {
                    userRepos = userReposNew;
                }
            }
        }
        return userRepos;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserRepos() {
        userRepos = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
